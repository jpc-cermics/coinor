-nsp->// -*- Mode: scilab -*-
-nsp->// Copyright (C) 2014-2014 Bruno Pinçon ESIAL/IECN
-nsp->//
-nsp->// This program is free software; you can redistribute it and/or modify
-nsp->// it under the terms of the GNU General Public License as published by
-nsp->// the Free Software Foundation; either version 2 of the License, or
-nsp->// (at your option) any later version.
-nsp->//
-nsp->// This program is distributed in the hope that it will be useful,
-nsp->// but WITHOUT ANY WARRANTY; without even the implied warranty of
-nsp->// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-nsp->// GNU General Public License for more details.
-nsp->//
-nsp->// You should have received a copy of the GNU General Public License
-nsp->// along with this program; if not, write to the Free Software
-nsp->// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-nsp->load_toolbox('nspcoinor');
nspcoinor toolbox not loaded (not found in toolboxes)
-nsp->// Note:
-nsp->// A and Ae must have the same number of colums
-nsp->// if A is empty it must be a 0xn empty matrix is Ae is mxn
-nsp->/////////////////////////////////////////////////////////////////////////////////
-nsp->// test 1-1:   max c'*x
-nsp->//             Ax <= b
-nsp->//              x >= 0
-nsp->A = [ 2 4 8  6;
==>     10 8 6 10;
==>      1 1 2  2];
-nsp->b = [100; 160;  20];
-nsp->c= [50; 40; 70; 80];
-nsp->options=hash(loglevel=0);
-nsp->[xopt,fopt,flag,lambda] = linprog_clp(c,A,b,[],[],sense="max",options=options);
-nsp->// exact sol, function value and basis information
-nsp->XM = [12;0;0;4]; FM = 920; final_basis = hash(aux = [1;3;3], str = [1;2;2;1]);
-nsp->if norm(xopt-XM)/norm(XM) >= 4*%eps then, pause, end
-nsp->if abs(fopt-FM)/abs(FM) >= 4*%eps then, pause, end
-nsp->if abs((dot(lambda,b)-fopt)/fopt) >= 4*%eps then, pause, end
-nsp->/////////////////////////////////////////////////////////////////////////////
-nsp->// test 2-1  (unbounded solution)
-nsp->//   max c'x
-nsp->//   Ax <= b
-nsp->//    x >= 0
-nsp->A= [-1 -1; -1 2; -2 1];
-nsp->b=[-3; -5; 5];
-nsp->c=[1; 3];
-nsp->[xopt,fopt,flag] = linprog_clp(c,A,b,[],[],sense="max",options=options);
-nsp->if flag <> 2 then pause;end // flag is 2 for unbounded pb 
-nsp->//////////////////////////////////////////////////////////////////////////////
-nsp->// tests on easy mips (from netlib)
-nsp->// get the possible options
-nsp->options = coinmp_options();
-nsp->options.LogLevel=0;
-nsp->// bal8x12.mps is a mip with x >= 0 (no need to provide lb=0)
-nsp->[c,A,b,Ae,be,sense,lb,ub,binprog,intprog,var_type] = readlp("NSP/tests/bal8x12.mps",verb=0);
-nsp->Fe = 471.55; 
-nsp->[xopt,fopt,flag] = linprog_coinmp(c,A,b,Ae,be,ub=ub,var_type=var_type,options=options);
-nsp->if abs((fopt-Fe)/Fe) >= 4*%eps then, pause, end
-nsp->// gr4x6.mps is a mip with x >= 0 (no need to provide lb=0)
-nsp->[c,A,b,Ae,be,sense,lb,ub,binprog,intprog,var_type] = readlp("NSP/tests/gr4x6.mps",verb=0);
-nsp->Fe = 202.35; 
-nsp->[xopt,fopt,flag] = linprog_coinmp(c,A,b,Ae,be,ub=ub,var_type=var_type,options=options);
-nsp->if abs((fopt-Fe)/Fe) >= 4*%eps then, pause, end
-nsp->// bk4x3.mps is a mip with x >= 0 (no need to provide lb=0)
-nsp->[c,A,b,Ae,be,sense,lb,ub,binprog,intprog,var_type] = readlp("NSP/tests/bk4x3.mps",verb=0);
-nsp->Fe = 350.0; 
-nsp->[xopt,fopt,flag] = linprog_coinmp(c,A,b,Ae,be,ub=ub,var_type=var_type,options=options);
-nsp->if abs((fopt-Fe)/Fe) >= 4*%eps then, pause, end
-nsp->// basic test for quadratic programming 
-nsp->//     Maximize
-nsp->//       obj: x1 + 2 x2 + 3 x3
-nsp->//              - 0.5 ( 33x1*x1 + 22*x2*x2 + 11*x3*x3
-nsp->//                   -  12*x1*x2 - 23*x2*x3 )
-nsp->//      Subject To
-nsp->//       c1: - x1 + x2 + x3 <= 20
-nsp->//       c2: x1 - 3 x2 + x3 <= 30
-nsp->//      Bounds
-nsp->//       0 <= x1 <= 40
-nsp->//      End
-nsp->// this is a test case of cplex 
-nsp->c=[1,2,3];
-nsp->A=sparse([-1,1,1;1,-3,1]);
-nsp->b=[20;30];
-nsp->lb=[0,-%inf,-%inf];
-nsp->ub=[40,%inf,%inf];
-nsp->Q= -[ 33,-06,00;
==>      -06,22,-23/2;
==>      00,-23/2,11];
-nsp->sol= 2.015617;
-nsp->xopt=[0.139115;0.598465;0.898396];
-nsp->lambda=[18.642254;30.757886];
-nsp->[xopt1,fopt1,flag1,lambda1] = linprog_clp(c,A,b,sparse([]),[],ub=ub,lb=lb,sense="max",Q=Q);
-nsp->// Q can be sparse
-nsp->[xopt1,fopt1,flag1,lambda1] = linprog_clp(c,A,b,sparse([]),[],ub=ub,lb=lb,sense="max",Q=Q);
-nsp->if (fopt1- 2.015617) > 1.e-5 then pause;end
-nsp->if norm(xopt1-xopt1) > 1.e-5 then pause;end
-nsp->// if norm(lambda1-lambda) > 1.e-5 then pause;end ?
